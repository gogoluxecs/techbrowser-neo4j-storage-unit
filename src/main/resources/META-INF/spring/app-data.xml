<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
       
	<context:component-scan base-package="org.linkstorage.aspects" />
       
	<!--Enables the use of @AspectJ style of aspects' declarations. AspectJ run-time isn't necessarily involved-->
	<aop:aspectj-autoproxy/>
	
  	<!--Platform Transaction Manager declared as "transactionManager" will be used.-->
  	<!--"aspectj" mode enables load-time/compile-time weaving of transactional methods, which enables
   	those methods to be intercepted even when called internally.
   	(Unlike Spring generated proxies which will only be intercepted when called from outside)-->
  	<tx:annotation-driven mode="aspectj"/>
  	
  	<bean id="transactionManager"
    	class="org.springframework.transaction.jta.JtaTransactionManager">
	    <property name="transactionManager" ref="neo4jTransactionManagerService" />
	    <property name="userTransaction" ref="neo4jUserTransactionService" />
	</bean>
	
	<bean id="neo4jTransactionManagerService" class="org.neo4j.kernel.impl.transaction.SpringTransactionManager" />
	
	<bean id="neo4jUserTransactionService" class="org.neo4j.kernel.impl.transaction.UserTransactionImpl">
	    <constructor-arg index="0" ref="graphDbService" />
	</bean>
  	
</beans>